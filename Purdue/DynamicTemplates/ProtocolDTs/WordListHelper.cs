// DO NOT EDIT THIS FILE !!!!
//
// Copy from Common/DynamicTemplates/FTProtocolDTs
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!
//
// DO NOT EDIT THIS FILE !!!!


//
//-------------------------------------------------------------------------------------------------
/// <remarks>
/// This program is the confidential and proprietary product of
/// Fast Track Systems, Inc. Any unauthorized use, reproduction,
/// or transfer of this program is strictly prohibited.
/// Copyright (C) 2003 by Fast Track Systems, Inc.
/// All rights reserved.
/// $Workfile: WordListHelper.cs$
/// $Revision: 1$
/// $Date: 18-Aug-09 12:07:05$
/// </remarks>
//-------------------------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.IO;
using System.Drawing;
using Tspd.Utilities;

using Word = Microsoft.Office.Interop.Word;

namespace TspdCfg.FastTrack.DynTmplts
{
	/// <summary>
	/// Summary description for WordListHelper.
	/// </summary>
	public class WordListHelper
	{
		/// <summary>
		/// Summary description for ListTemplate.
		/// </summary>
		public class ListTemplate 
		{
			private Hashtable _wordListLevels = new Hashtable();
			private float _indentInches = 0.25f;
			private int _currentLevel = 1;
			private Word.Application _wdApp = null;
			private bool _resetOnHigher = true;

			public ListTemplate(Word.Application wdApp) 
			{
				_wdApp = wdApp;
			}

			public float IndentInches 
			{
				get { return _indentInches; }
				set { _indentInches = value; }
			}

			public bool ResetOnHigher
			{
				get { return _resetOnHigher; }
				set { _resetOnHigher = value; }
			}

			public int CurrentLevel
			{
				get { return _currentLevel; }
			}

			public void RestartNumbers()
			{
				foreach (ListFormat wlf in _wordListLevels.Values) 
				{
					wlf.RestartNumbers();
				}
			}

			public void ResetLevel(Word.Range wrkRng) 
			{
				_currentLevel = 1;
			}

			public void Indent(Word.Range wrkRng) 
			{
				_currentLevel++;

				ApplyListFormat(wrkRng);
			}

			public void Outdent(Word.Range wrkRng) 
			{
				Outdent(wrkRng, _resetOnHigher);
			}

			public void Outdent(Word.Range wrkRng, bool reset) 
			{
				if (reset) 
				{
					ListFormat wlf = getCurrentWLF();
					wlf.RestartNumbers();
				}

				_currentLevel--;
				ApplyListFormat(wrkRng);
			}

			public void ApplyListFormat(Word.Range wrkRng) 
			{
				ApplyListFormat(wrkRng, true);
			}

			public void ApplyListFormat(Word.Range wrkRng, bool bInsertNumber) 
			{
				ListFormat wlf = getCurrentWLF();
				
				Word.Range r = wrkRng.Duplicate;

				float leftIndent = (_currentLevel) * _indentInches;
				float firstLineIndent = -_indentInches;

				// If inserting a number we don't want to indent the list
				if (!bInsertNumber) 
				{
					leftIndent = (_currentLevel -1) * _indentInches;
					firstLineIndent = 0;
				}

				r.ParagraphFormat.LeftIndent = _wdApp.InchesToPoints(leftIndent);
				r.ParagraphFormat.FirstLineIndent = _wdApp.InchesToPoints(firstLineIndent);
				
				if (wlf.FontFamily != null) 
				{
					r.Font.Name = wlf.FontFamily;
				}

				if (wlf.FontSize != -1) 
				{
					r.Font.Size = wlf.FontSize;
				}

				if (wlf.HaveFontStyle) 
				{
					int iBold = VBAHelper.iFALSE;
					int iItalic = VBAHelper.iFALSE;
					int iStrikeOut = VBAHelper.iFALSE;
					int iUnderline = VBAHelper.iFALSE;
					

					if ((wlf.FontStyle & FontStyle.Bold) != 0)
					{
						iBold = VBAHelper.iTRUE;
					}

					if ((wlf.FontStyle & FontStyle.Italic) != 0)
					{
						iItalic = VBAHelper.iTRUE;
					}

					if ((wlf.FontStyle & FontStyle.Strikeout) != 0)
					{
						iStrikeOut = VBAHelper.iTRUE;
					}

					if ((wlf.FontStyle & FontStyle.Underline) != 0)
					{
						iUnderline = VBAHelper.iTRUE;
					}

					r.Font.Bold = iBold;
					r.Font.Italic = iItalic;
					r.Font.StrikeThrough = iStrikeOut;

					if (iUnderline == VBAHelper.iTRUE) 
					{
						r.Font.Underline = Word.WdUnderline.wdUnderlineSingle;
					}
					else
					{
						r.Font.Underline = Word.WdUnderline.wdUnderlineNone;
					}

					if (wlf.HaveParagraphAlignment) 
					{
						r.ParagraphFormat.Alignment = wlf.ParagraphAlignment;
					}
				}
			}

			public void ApplyNumberFormat(Word.Range wrkRng) 
			{
				ListFormat wlf = getCurrentWLF();

				Word.Range r = wrkRng.Duplicate;

				if (wlf.NumberFontFamily != null) 
				{
					r.Font.Name = wlf.NumberFontFamily;
				}

				if (wlf.NumberFontSize != -1) 
				{
					r.Font.Size = wlf.NumberFontSize;
				}

				if (wlf.HaveNumberFontStyle) 
				{
					int iBold = VBAHelper.iFALSE;
					int iItalic = VBAHelper.iFALSE;
					int iStrikeOut = VBAHelper.iFALSE;
					int iUnderline = VBAHelper.iFALSE;
					

					if ((wlf.NumberFontStyle & FontStyle.Bold) != 0)
					{
						iBold = VBAHelper.iTRUE;
					}

					if ((wlf.NumberFontStyle & FontStyle.Italic) != 0)
					{
						iItalic = VBAHelper.iTRUE;
					}

					if ((wlf.NumberFontStyle & FontStyle.Strikeout) != 0)
					{
						iStrikeOut = VBAHelper.iTRUE;
					}

					if ((wlf.NumberFontStyle & FontStyle.Underline) != 0)
					{
						iUnderline = VBAHelper.iTRUE;
					}

					r.Font.Bold = iBold;
					r.Font.Italic = iItalic;
					r.Font.StrikeThrough = iStrikeOut;

					if (iUnderline == VBAHelper.iTRUE) 
					{
						r.Font.Underline = Word.WdUnderline.wdUnderlineSingle;
					}
					else
					{
						r.Font.Underline = Word.WdUnderline.wdUnderlineNone;
					}
				}
			}

			public void BeginListItem(ref Word.Range wrkRng) 
			{
				BeginListItem(ref wrkRng, true);
			}

			public void EndListItem(ref Word.Range wrkRng) 
			{
				wrkRng.InsertParagraphAfter();
				wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
			}

			public void BeginListItem(ref Word.Range wrkRng, bool bInsertNumber) 
			{
				ApplyListFormat(wrkRng, bInsertNumber);

				if (bInsertNumber)
				{
					ListFormat wlf = getCurrentWLF();
					string sNumber = string.Format(wlf.NumberFormat, wlf.NumberAndIncrement);

					wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
					wrkRng.InsertAfter(sNumber);
					Word.Range numRange = wrkRng.Duplicate;
					wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
					wrkRng.InsertAfter("\t");

					ApplyNumberFormat(numRange);
				}
			}

			public ListFormat getCurrentWLF() 
			{
				return getWLF(_currentLevel);
			}

			public ListFormat getWLF(int level) 
			{
				ListFormat wlf = _wordListLevels[level] as ListFormat;

				if (wlf == null) 
				{
					wlf = new ListFormat();
					_wordListLevels[level] = wlf;
				}

				return wlf;
			}
		}


		/// <summary>
		/// Summary description for ListFormat.
		/// </summary>
		public class ListFormat
		{
			public enum NumberStyle 
			{
				NUMBER, ALPHA_LOWERCASE, ALPHA_UPPERCASE, ROMAN_LOWERCASE, ROMAN_UPPERCASE
			}

			private int _number = 1;

			private NumberStyle _numberStyle = NumberStyle.NUMBER;
			private string _numberFormat = "{0}";

			private string _fontFamily = null;
			private float _fontSize = -1;
			private bool _haveFontStyle = false;
			private FontStyle _fontStyle = 0;

			private string _numberFontFamily = null;
			private float _numberFontSize = -1;
			private bool _haveNumberFontStyle = false;
			private FontStyle _numberFontStyle = 0;

			private bool _haveParagraphAlignment = false;
			private Word.WdParagraphAlignment _paragraphAlignment = 0;

			public void RestartNumbers() 
			{
				_number = 1;
			}

			public string NumberFormat
			{
				get { return _numberFormat; }
				set { _numberFormat = value; }
			}

			public NumberStyle ListNumberStyle 
			{
				get { return _numberStyle; }
				set { _numberStyle = value; }
			}

			public string FontFamily 
			{
				get { return _fontFamily ; }
				set { _fontFamily = value; }
			}

			public float FontSize 
			{
				get { return _fontSize; }
				set { _fontSize = value; }
			}

			public FontStyle FontStyle
			{
				get { return _fontStyle; }
				
				set 
				{
					_fontStyle = value;
					_haveFontStyle = true;
				}
			}

			public bool HaveFontStyle 
			{
				get { return _haveFontStyle; }
			}

			public Word.WdParagraphAlignment ParagraphAlignment
			{
				get { return _paragraphAlignment; }
				
				set 
				{
					_paragraphAlignment = value;
					_haveParagraphAlignment = true;
				}
			}

			public bool HaveParagraphAlignment 
			{
				get { return _haveParagraphAlignment; }
			}

			public string NumberFontFamily 
			{
				get { return _numberFontFamily ; }
				set { _numberFontFamily = value; }
			}

			public float NumberFontSize 
			{
				get { return _numberFontSize; }
				set { _numberFontSize = value; }
			}

			public FontStyle NumberFontStyle
			{
				get { return _numberFontStyle; }
				
				set 
				{
					_numberFontStyle = value;
					_haveNumberFontStyle = true;
				}
			}

			public bool HaveNumberFontStyle 
			{
				get { return _haveNumberFontStyle; }
			}

			public string NumberAndIncrement
			{
				get 
				{ 
					int n = _number; 
					string s = "X";
					_number++;

					switch (ListNumberStyle) 
					{
						case ListFormat.NumberStyle.NUMBER:
							s = n.ToString();
							break;

						case ListFormat.NumberStyle.ALPHA_LOWERCASE:
							s = numberToAlpha(n, true);
							break;

						case ListFormat.NumberStyle.ALPHA_UPPERCASE:
							s = numberToAlpha(n, false);
							break;

						case ListFormat.NumberStyle.ROMAN_LOWERCASE:
							s = numberToRoman(n, true);
							break;

						case ListFormat.NumberStyle.ROMAN_UPPERCASE:
							s = numberToRoman(n, false);
							break;
					}

					return s;
				}
			}
		}

		// helper to get alpha numbering
		private static string numberToAlpha(int number, bool lowerCase)
		{
			string s = "";

			char startChar;

			if (lowerCase) 
			{
				startChar = 'a';
			}
			else
			{
				startChar = 'A';
			}

			int numberBase = 26;
			int startNumber = startChar - 1;


			while ((number / numberBase) > 0)
			{
				int modN = number % numberBase;
				int n1 = startNumber + modN;
				if (modN == 0) 
				{
					n1 += numberBase;
				}

				s += ((char)n1).ToString();

				number -= ((number / numberBase) * numberBase);
			}

			if (number != 0) 
			{
				int n2 = startNumber + number;
				s += ((char)n2).ToString();
			}

			return s;
		}

		// helper to get roman numbering
		private static string numberToRoman(int number, bool lowerCase) 
		{
			string romanValue = "";

			if (number > 3999 || number < 1)
			{
				romanValue = "N/A";
				return romanValue;
			}

			while (number > 999)
			{
				romanValue = romanValue + "M";	// Concatenate the letters to the right side
				number = number - 1000;			// Reduce the amount left in number
			}

			if (number > 899)
			{
				romanValue = romanValue + "CM";	// Concatenate letters to the right side
				number = number - 900;
			}

			if (number > 499)
			{
				romanValue = romanValue + "D";
				number = number - 500;
			}

			if (number > 399)
			{
				romanValue = romanValue + "CD";
				number = number - 400;
			}

			while (number > 99)
			{
				romanValue = romanValue + "C";
				number = number - 100;
			}

			if (number > 89)
			{
				romanValue = romanValue + "XC";
				number = number - 90;
			}

			if (number > 49)
			{
				romanValue = romanValue + "L";
				number = number - 50;
			}

			if (number > 39)
			{
				romanValue = romanValue + "XL";
				number = number - 40;
			}

			while (number > 9)
			{
				romanValue = romanValue + "X";
				number = number - 10;
			}

			if (number > 8)
			{
				romanValue = romanValue + "IX";
				number = number - 9;
			}

			if (number > 4)
			{
				romanValue = romanValue + "V";
				number = number - 5;
			}

			if (number > 3)
			{
				romanValue = romanValue + "IV";
				number = number - 4;
			}

			while (number > 0)
			{
				romanValue = romanValue + "I";
				number = number - 1;
			}

			if (lowerCase) 
			{
				romanValue = romanValue.ToLower();
			}

			return romanValue;
		}

		private WordListHelper() 
		{
		}

		public static ListTemplate getWordListTemplate(Word.Application wdApp) 
		{
			return new ListTemplate(wdApp);
		}

		public static ListTemplate getBulletListTemplate(Word.Application wdApp) 
		{
			ListTemplate wlt = new ListTemplate(wdApp);
			ListFormat wlf = wlt.getWLF(1);

			wlf.NumberFormat = "\u00b7";
			wlf.NumberFontFamily = "Symbol";

			return wlt;
		}

		public static ListTemplate getNumberedListTemplate(Word.Application wdApp) 
		{
			ListTemplate wlt = new ListTemplate(wdApp);

			ListFormat wlf = null;
				
			// 9 Should be enough
			wlf = wlt.getWLF(1);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(2);
			wlf.NumberFormat = "{0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(3);
			wlf.NumberFormat = "{0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_UPPERCASE;

			wlf = wlt.getWLF(4);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(5);
			wlf.NumberFormat = "({0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(6);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_UPPERCASE;

			wlf = wlt.getWLF(7);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(8);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(9);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_UPPERCASE;

			return wlt;
		}

		public static ListTemplate getSOANarrativeListTemplate(Word.Application wdApp) 
		{
			ListTemplate wlt = new ListTemplate(wdApp);

			ListFormat wlf = null;
				
			// 9 Should be enough
			wlf = wlt.getWLF(1);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(2);
			wlf.NumberFormat = "{0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(3);
			wlf.NumberFormat = "{0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(4);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(5);
			wlf.NumberFormat = "({0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(6);
			wlf.NumberFormat = "({0})";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ROMAN_LOWERCASE;

			wlf = wlt.getWLF(7);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.NUMBER;

			wlf = wlt.getWLF(8);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ALPHA_LOWERCASE;

			wlf = wlt.getWLF(9);
			wlf.NumberFormat = "{0}.";
			wlf.ListNumberStyle = ListFormat.NumberStyle.ROMAN_LOWERCASE;

			return wlt;
		}

		public static void displayNumberedList(ref Word.Range wrkRng, string listLabel,
			ICollection list, string emptyMsg, Word.Application wdApp)
		{
			ListTemplate wlt = WordListHelper.getNumberedListTemplate(wdApp);

			displayList(ref wrkRng, listLabel, list, emptyMsg, wdApp, wlt);
		}

		public static void displayBulletedList(ref Word.Range wrkRng, string listLabel,
			ICollection list, string emptyMsg, Word.Application wdApp)
		{
			ListTemplate wlt = WordListHelper.getBulletListTemplate(wdApp);

			displayList(ref wrkRng, listLabel, list, emptyMsg, wdApp, wlt);
		}

		public static void displayList(ref Word.Range wrkRng, string listLabel,
			ICollection list, string emptyMsg, Word.Application wdApp, ListTemplate wlt)
		{
			wrkRng.Collapse(ref WordHelper.COLLAPSE_END);

			if (listLabel != null) 
			{
				wrkRng.InsertAfter(listLabel);
				wrkRng.Bold = VBAHelper.iTRUE;
				wrkRng.Underline = Word.WdUnderline.wdUnderlineThick;
				wrkRng.InsertParagraphAfter();
				wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
			}

			if (list.Count == 0) 
			{
				wrkRng.InsertAfter(emptyMsg);
				wrkRng.InsertParagraphAfter();
				wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
			}
			else
			{
				for (IEnumerator ienum = list.GetEnumerator(); ienum.MoveNext(); ) 
				{
					string sCurrent = ienum.Current.ToString();
					
					wlt.BeginListItem(ref wrkRng);

					// Convert newlines to returns
					wrkRng.Collapse(ref WordHelper.COLLAPSE_END);
					sCurrent = sCurrent.Replace("\n", "\v");
                    WordFormatter.FTToWordFormat2(ref wrkRng, sCurrent);
					
					wlt.EndListItem(ref wrkRng);
				}
			}
		}
	}
}
